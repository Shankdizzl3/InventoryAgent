import requests
import json
import re
import inventory_tools

# --------------------------------------------------------------------------
# --- 1. CONFIGURATION ---
# --------------------------------------------------------------------------

LLM_SERVER_URL = "http://localhost:8000/completion"
N_PREDICT = 512 # Reduced as the task is simpler
TEMPERATURE = 0.1
TOP_P = 0.9
STOP_TOKENS = ["<|end|>", "```"]

# --------------------------------------------------------------------------
# --- 2. AGENT'S NEW, SIMPLIFIED PROMPT ---
# --------------------------------------------------------------------------

SYSTEM_PROMPT = """You are a data retrieval assistant for an inventory system. Your sole purpose is to use the provided tool to fetch transaction data for a given part number.

**Available Tools:**
- `get_transactions_for_part(part_number: str)`: Retrieves all transaction records from the IntegrationTransactions table for a specific part number.

**Instructions:**
- Based on the user's request, generate the single, correct `tool_calls` JSON object needed to run the tool.

**JSON Response Format:**
```json
{
  "tool_calls": [
    {
      "function": "get_transactions_for_part",
      "arguments": { "part_number": "THE_PART_NUMBER_HERE" }
    }
  ]
}
```

**CRITICAL:** Your output MUST be only the JSON object and nothing else.
"""

# --------------------------------------------------------------------------
# --- 3. CORE AGENT LOGIC ---
# --------------------------------------------------------------------------

def query_llm_for_tool_call(user_request: str) -> dict:
    """
    Sends a user request to the LLM and expects a tool call plan in return.
    """
    full_prompt = (
        f"<|system|>\n{SYSTEM_PROMPT}<|end|>\n"
        f"<|user|>\n{user_request}<|end|>\n"
        f"<|assistant|>\n"
        "```json\n"
    )

    headers = {"Content-Type": "application/json"}
    data = {
        "prompt": full_prompt, "n_predict": N_PREDICT, "temperature": TEMPERATURE,
        "top_p": TOP_P, "stop": STOP_TOKENS,
    }

    print("--- Sending Prompt to LLM to generate tool call ---")
    try:
        response = requests.post(LLM_SERVER_URL, headers=headers, data=json.dumps(data), timeout=120)
        response.raise_for_status()
        result = response.json()
        llm_content = result.get('content', '').strip()

        print("--- Received Raw Response from LLM ---")
        print(llm_content)
        
        match = re.search(r'\{.*\}', llm_content, re.DOTALL)
        if not match: return None
        return json.loads(match.group(0))

    except (requests.exceptions.RequestException, json.JSONDecodeError) as e:
        print(f"ERROR during LLM query: {e}")
        return None

def execute_tool_call(tool_call_plan: dict):
    """
    Executes the tool call plan generated by the LLM.
    """
    if not tool_call_plan or "tool_calls" not in tool_call_plan:
        print("Invalid or empty tool call plan.")
        return None

    tool_to_run = tool_call_plan["tool_calls"][0]
    function_name = tool_to_run.get("function")
    arguments = tool_to_run.get("arguments", {})

    if function_name == "get_transactions_for_part":
        return inventory_tools.get_transactions_for_part(**arguments)
    else:
        print(f"WARNING: Unknown tool '{function_name}' requested. Cannot execute.")
        return None

def run_retrieval(part_to_find: str):
    """
    Executes the simplified data retrieval workflow.
    """
    print("==============================================")
    print(f"= STARTING DATA RETRIEVAL FOR PART: {part_to_find} =")
    print("==============================================\n")

    # Phase 1: Let the LLM generate the tool call
    user_request = f"Please pull all transaction information for part number {part_to_find}."
    llm_plan = query_llm_for_tool_call(user_request)

    # Phase 2: Execute the generated tool call
    if llm_plan:
        db_results_json = execute_tool_call(llm_plan)
        if db_results_json:
            print("\n--- Final Database Results ---")
            # Parse and re-print for clean formatting
            print(json.dumps(json.loads(db_results_json), indent=2))
            print("------------------------------")
    else:
        print("Failed to get a valid plan from the LLM.")

    print("\n==========================")
    print("= RETRIEVAL COMPLETE     =")
    print("==========================\n")

# --------------------------------------------------------------------------
# --- 4. SCRIPT EXECUTION ---
# --------------------------------------------------------------------------

if __name__ == "__main__":
    # The part number the agent will look up.
    part_to_investigate = "YOUR_TEST_PART_NUMBER" # <-- IMPORTANT: CHANGE THIS
    run_retrieval(part_to_investigate)

